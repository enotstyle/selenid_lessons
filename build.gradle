//указание что в проекте используется java
plugins {
    id 'java-library'
    id 'io.qameta.allure' version "2.11.2"
}

allure {
    report { //секция репорта
        version.set("2.19.0")
    }
    adapter { // отвечает за появление папки build/allure-results
        aspectjWeaver.set(true)  // обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set("2.19.0") //версия интеграции фреймворка и Allure
            }
        }
    }
}

//откуда подтягиваются зависимости
repositories {
    mavenCentral()
}

compileTestJava {
    options.encoding = 'UTF-8'
}

//зависимости, библиотеки которые используем
dependencies {
    testImplementation(
            "com.codeborne:selenide:6.14.1",
            "org.junit.jupiter:junit-jupiter:5.9.1",
            "org.slf4j:slf4j-simple:2.0.7",
            "org.assertj:assertj-core:3.24.2",
            "com.codeborne:pdf-test:1.8.1",
            "com.codeborne:xls-test:1.4.3",
            "com.opencsv:opencsv:5.7.1",
            "com.google.code.gson:gson:2.10",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-selenide:2.19.0"
    )
}

//используем junit для тестов
test {
    useJUnitPlatform {}
}

//указывает на тип заданий, которые будут выполнены. В данном случае это задания типа "Test", что означает запуск тестового набора.
tasks.withType(Test) {
    //получить системные свойства Java, определенные при запуске сборки через аргументы командной строки -Dname=value
    systemProperties(System.getProperties())
    //указывает на использование фреймворка JUnit Platform для запуска тестов
    useJUnitPlatform()

    //определяет настройки логгирования результатов тестирования
    testLogging {
        //определяет список событий тестирования, которые должны быть залогированы.
        lifecycle {
            //В данном случае это started, skipped, failed, standard_error, standard_out.
            events "started", "skipped", "failed", "standard_error", "standard_out"
            //определяет формат вывода сообщений об ошибках (исключениях). В данном случае используется короткий формат "short".
            exceptionFormat "short"
        }
    }
}

task simple_test(type: Test) {
    useJUnitPlatform {
        includeTags("Simple")
    }
}

task jen_test(type: Test) {
    useJUnitPlatform {
        //запустить тесты с этим тегом
        includeTags("Jenkins")
        //не запускать тесты с этим тегом
//        excludeTags("Jenkins")
    }
}

task one_property_test(type: Test) {
    useJUnitPlatform {
        includeTags("one_property")
    }
}

task hello_test(type: Test) {
    useJUnitPlatform {
        includeTags("hello_test")
    }
}

//gradle clean simple_test
//https://jenkins.autotests.cloud/
//https://selenoid.autotests.cloud/#/